--> Rest operator 

When we dont know how many argument is passed in a function we can use rest and spread(...) operator

//Rest operator

let sum = function(){
    let sum = 0;
    console.log(arguments);
    for(let i in arguments){
        sum += arguments[i];
    }
    return sum;
}

console.log(sum(20, 30));
console.log(sum(20,30,40));

let prod = function(name, ...args){
    let prod = 1;
    for(let i in args){
        prod *= args[i];
    }
    return prod;
}

console.log(prod("Aniket", 20, 30));
console.log(prod("Saikat", 2, 2, 2));

// all the arguments are converted in a array which we can use easily 

-->Spread operator (...)

let sum = function(name, ...args){
    let sum = 0;
    console.log(args);
    for(let i in args){
        sum += args[i];
    }
    return sum;
}


const arr = [1, 2, 3];
console.log(sum("Aniket", ...arr));

//concat using spread
let arr3 = [5, ...arr1, 78, ...arr2];

let object3 = {...obj1, ...obj2}

-->Destructing array
let arr = ["Aniket", 26]
let [name, age] = arr;

-->  Promise 

three states ==> pending - fulfilled - rejected
                           resolve- then(), reject - catch() callback functions
//Promise example

function promise(complete){
    return new Promise(function(resolve, reject){
        console.log("Getting Data");
        setTimeout(()=>{
            if(complete){
                resolve("Success");
            }
            else{
                reject("Fail");
            }
        }, 5000);
    });
}

promise(false).then((result) => {
    console.log(result);
}).catch((error) => {
    console.log(error);
});

//Promise example 2 using jquery and ajax

function promise(complete){
    return new Promise(function(resolve, reject){
        console.log("Getting Data");
        setTimeout(()=>{
            $.get("https://jsonplaceholder.typicode.com/post",
            function(data){
                resolve(data);
            }).fail(err => {
                reject("FAIL to get data")
            })
        }, 5000);
    });
}

promise(false).then((result) => {
    console.log(result);
}).catch((error) => {
    console.log(error);
});

//get function takes 2 parameter, url and function that hold the return

-->  //promise.all() is used to check multiple promises and when all of them
//are resolved then will be executed else catch

let p1 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log("First promise");
        resolve(10);
    }, 1000);
});

let p2 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log("Second promise");
        reject("FAIL");
    }, 2000);
});

Promise.all([p1, p2]).then((result)=>{
    console.log(result);
}).catch((error) => {
    console.log(error);
});


/*
AJAX Working 
5 Steps (readyState)
0: request not initiated
1: server connection established 
2: request received
4: processing request
5: request finished and response is ready
*/

var xhttp = new XMLHttpRequest();

xhttp.onreadystatechange = function(){
    if(this.readyState==4 && this.status==200){
        console.log(this.responseText);
    }
    else if(this.readyState==4 && this.status==404){
        console.log("Page not found");
    }
}

xhttp.open('GET', "API URL", true);
//last parameter is whether async nature is true or false
xhttp.send();

--> we have fetch that has replaced jquery ajax and xmlhttprequest

/*
fetch(URL) --> Promise
fetch(URL).then(...) --> promise (so we need another then)
*/

fetch("https://jsonplaceholder.typicode.com/users")
.then((res) => res.json())
.then((data) => {
    for(let i in data){
        console.log(data[i]);
    }
})
.catch((error) => console.log("Cant fetch data"));


API get using jquery ajax

 function prom()
        //function returns a promise
        {
            return new Promise(function(resolve, reject)
            //taking resolve and reject as parameters 
            {
            console.log("fetching data, please wait");
 
       setTimeout( () => {
        $.get("https://jsonplaceholder.typicode.com/posts",
        function(data)
          {
              resolve(data);
              //calling resolve function
           }).fail(err => {
              //integrating error message
              reject("failed to load json")
          });
        }, 1000)
          
      });
    }
//function Prom() ends 
prom().then((result) => {
        console.log(result)
    }).catch((error) => {
        console.log(error)
    });
    


--> fetching API using xmlHttpRequest

// create XHR object 
var xhttp = new XMLHttpRequest()

// once we get server response, set it in our HTML DOM 
xhttp.onreadystatechange = function() {
    if(this.readyState == 4 && this.status == 200){
        document.getElementById('demo').innerHTML = this.responseText
        
    }
}
//response sent by the server can be either: responseText or responseXML 
//only demo div will be refreshed 

//xhttp.open('mode of file (GET/POST)', 'file name' async mode)
xhttp.open('GET', 'filename.txt', true)

//send the request to server 
xhttp.send()


-->Now using fetch API

fetch("https://jsonplaceholder.typicode.com/posts")
        .then(function(response){
           return response.json();
           //.then, returns promise over here, however this promise will be used in
            the next then function

        //the next then function attached to the method chain 
        }).then(function(result)
        //if promise succeeds this function will execute
        {
            console.log(result)
            // data printed on console, is due to this console 

        }).catch(function(error)
        //else if the promise fails, this function will execute 
        {
           console.log(error)

        });


-------------------------------------------------------------

fetch(file/URL, {
	method: "POST" --> PUT, DELETE, GET(default)
	body: data -> Data, JSON Data, Text
	header:{
		'content-type': 'application/json',
		}
})
.then((res) => res.json())
.then((data) => console.log(data)
.catch((error) => console.log(error);





----------------------------------------------
	
-> async and await 
async function always return promise, it makes using promise easy

async function test(){
    return "Hello";
}

test().then((res)=> {
    console.log(res);
})

async function test(){
    //task 1 
    await //task 2 (we can use fetch) till it fetch data we can complete other tasks
    //task 3
}

test();
//task 4
//task 5

// 1-2-4-5-3
//if we use await in async function then task after await is stalled 
//till all the task is completed (it will be completed by event loop)


===============================================



//Data type - Symbol (unique value)

let x = Symbol("Hello");
let y = Symbol("Hello");
console.log(x==y) //return false
console.log(x.description); //hello


























 









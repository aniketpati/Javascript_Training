--> Rest operator 

When we dont know how many argument is passed in a function we can use rest and spread(...) operator

//Rest operator

let sum = function(){
    let sum = 0;
    console.log(arguments);
    for(let i in arguments){
        sum += arguments[i];
    }
    return sum;
}

console.log(sum(20, 30));
console.log(sum(20,30,40));

let prod = function(name, ...args){
    let prod = 1;
    for(let i in args){
        prod *= args[i];
    }
    return prod;
}

console.log(prod("Aniket", 20, 30));
console.log(prod("Saikat", 2, 2, 2));

// all the arguments are converted in a array which we can use easily 

-->Spread operator (...)

let sum = function(name, ...args){
    let sum = 0;
    console.log(args);
    for(let i in args){
        sum += args[i];
    }
    return sum;
}


const arr = [1, 2, 3];
console.log(sum("Aniket", ...arr));

//concat using spread
let arr3 = [5, ...arr1, 78, ...arr2];

let object3 = {...obj1, ...obj2}

-->Destructing array
let arr = ["Aniket", 26]
let [name, age] = arr;

-->  Promise 

three states ==> pending - fulfilled - rejected
                           resolve- then(), reject - catch() callback functions
//Promise example

function promise(complete){
    return new Promise(function(resolve, reject){
        console.log("Getting Data");
        setTimeout(()=>{
            if(complete){
                resolve("Success");
            }
            else{
                reject("Fail");
            }
        }, 5000);
    });
}

promise(false).then((result) => {
    console.log(result);
}).catch((error) => {
    console.log(error);
});

//Promise example 2 using jquery and ajax

function promise(complete){
    return new Promise(function(resolve, reject){
        console.log("Getting Data");
        setTimeout(()=>{
            $.get("https://jsonplaceholder.typicode.com/post",
            function(data){
                resolve(data);
            }).fail(err => {
                reject("FAIL to get data")
            })
        }, 5000);
    });
}

promise(false).then((result) => {
    console.log(result);
}).catch((error) => {
    console.log(error);
});

//get function takes 2 parameter, url and function that hold the return

-->  //promise.all() is used to check multiple promises and when all of them
//are resolved then will be executed else catch

let p1 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log("First promise");
        resolve(10);
    }, 1000);
});

let p2 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log("Second promise");
        reject("FAIL");
    }, 2000);
});

Promise.all([p1, p2]).then((result)=>{
    console.log(result);
}).catch((error) => {
    console.log(error);
});






 








